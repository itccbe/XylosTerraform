name: 'Terraform - complete workflow'

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:
    inputs:
      stage:
        description: "Please choose the environment to deploy to"
        type: choice
        options:
        - Development
        - Test

jobs:
  checkov:
    name: 'Checkov - Scan Terraform files'
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: Test with Checkov
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        soft_fail: true
        framework: terraform
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        # Path to SARIF file relative to the root of the repository
        sarif_file: results.sarif

  tfsec:
    name: 'tfsec sarif report'
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
    - name: Clone repo
      uses: actions/checkout@v3
      with:
        persist-credentials: false

    - name: tfsec
      uses: aquasecurity/tfsec-sarif-action@v0.1.0
      with:
        sarif_file: tfsec.sarif

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        # Path to SARIF file relative to the root of the repository
        sarif_file: tfsec.sarif

  tflint:
    name: 'Terraform Lint'
    if: github.ref != 'refs/heads/main'
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
      ARM_ACCESS_KEY: ${{ secrets.ACCOUNT_KEY }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      name: Checkout source code

    - uses: actions/cache@v3
      name: Cache plugin dir
      with:
        path: ~/.tflint.d/plugins
        key: ${{ matrix.os }}-tflint-${{ hashFiles('.tflint.hcl') }}

    - uses: terraform-linters/setup-tflint@v2
      name: Setup TFLint
      with:
        tflint_version: latest
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Show version
      run: tflint --version

    - name: Init TFLint
      run: tflint --init

    - name: Terraform Init
      id: initmanual
      if: github.event_name == 'workflow_dispatch'
      run: terraform init -reconfigure -backend-config="${{ github.event.inputs.stage }}.tfbackend"

    - name: Terraform Init
      id: init
      if: github.event_name != 'workflow_dispatch'
      run: terraform init -reconfigure -backend-config="Production.tfbackend"

    - name: Run TFLint
      run: tflint -f compact

  Analysis:
    name: 'SonarCloud Scan'
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Analyze with SonarCloud
      uses: SonarSource/sonarcloud-github-action@de2e56b42aa84d0b1c5b622644ac17e505c9a049
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=itccbe_XylosTerraform
          -Dsonar.organization=itccbe

  terraform:
    name: 'Terraform Validate and Plan'
    if: github.ref != 'refs/heads/main'
    needs: [checkov, tfsec, tflint, Analysis]
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
      ARM_ACCESS_KEY: ${{ secrets.ACCOUNT_KEY }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.0.5

    - name: Terraform Init
      id: initmanual
      if: github.event_name == 'workflow_dispatch'
      run: terraform init -reconfigure -backend-config="${{ github.event.inputs.stage }}.tfbackend"

    - name: Terraform Init
      id: init
      if: github.event_name != 'workflow_dispatch'
      run: terraform init -reconfigure -backend-config="Production.tfbackend"

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    # - name: Run driftctl
    #   uses: snyk/driftctl-action@v1.2.0
    #   env:
    #     AZURE_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
    #     AZURE_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
    #     AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    #     AZURE_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
    #     AZURE_STORAGE_ACCOUNT: statefilestorage001
    #     AZURE_STORAGE_KEY: ${{ secrets.ACCOUNT_KEY }}
    #     DCTL_TO: azure+tf
    #     DCTL_FROM: tfstate+azurerm://statefile/**

    - name: Terraform Plan
      id: planmanual
      if: github.event_name == 'workflow_dispatch'
      run: terraform plan -no-color -input=false -var-file="${{ github.event.inputs.stage }}.tfvars"
      continue-on-error: true

    - name: Terraform Plan
      id: plan
      if: github.event_name != 'workflow_dispatch'
      run: terraform plan -no-color -input=false -var-file="tfvars/production.tfvars"
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Post Plan
      uses: robburger/terraform-pr-commenter@v1
      if: github.event_name == 'pull_request'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        commenter_type: plan
        commenter_input: ${{ format('{0}{1}', steps.plan.outputs.stdout, steps.plan.outputs.stderr) }}
        commenter_exitcode: ${{ steps.plan.outputs.exitcode }}

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

  infracost:
    name: 'Calculate Azure cost'
    if: github.ref != 'refs/heads/main'
    needs: [terraform]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    env:
      TF_ROOT: .
    steps:
    - name: Setup Infracost
      uses: infracost/actions/setup@v2
      with:
        api-key: ${{ secrets.INFRACOST_API_KEY }}

    - name: Checkout base branch
      uses: actions/checkout@v3
      with:
        ref: '${{ github.event.pull_request.base.ref }}'

    - name: Generate Infracost cost estimate baseline
      run: |
        infracost breakdown --path=${TF_ROOT} \
                            --format=json \
                            --out-file=/tmp/infracost-base.json

    - name: Checkout PR branch
      uses: actions/checkout@v3

    - name: Generate Infracost diff
      run: |
        infracost diff --path=${TF_ROOT} \
                        --format=json \
                        --compare-to=/tmp/infracost-base.json \
                        --out-file=/tmp/infracost.json

    - name: Post Infracost comment
      if: github.event_name == 'pull_request'
      run: |
          infracost comment github --path=/tmp/infracost.json \
                                    --repo=$GITHUB_REPOSITORY \
                                    --github-token=${{github.token}} \
                                    --pull-request=${{github.event.pull_request.number}} \
                                    --behavior=update

  deploy:
    name: 'Terraform Apply'
    if: ${{ always() }}
    needs: [infracost]
    environment: "${{ github.event.inputs.stage }}"
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
      ARM_ACCESS_KEY: ${{ secrets.ACCOUNT_KEY }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      id: initmanual
      if: github.event_name == 'workflow_dispatch'
      run: terraform init -backend-config="${{ github.event.inputs.stage }}.tfbackend"

    - name: Terraform Init
      id: init
      if: github.event_name != 'workflow_dispatch'
      run: terraform init -backend-config="tfvars/production.tfbackend"

    - name: Terraform Apply
      if: github.event_name == 'workflow_dispatch'
      run: terraform apply -auto-approve -input=false -var-file="${{ github.event.inputs.stage }}.tfvars"

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false -var-file="tfvars/production.tfvars"
